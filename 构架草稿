v0.2  20150512  //Author You.Xu

本人新手，请多指教，勿喷


----------------------------------------------------
----------------------------------------------------
包组织构架

radius   //radius报文解包封包基本操作，属性厂商列表定义域
radius/radiuscli  //radius的客户端实现
radius/radiusserv //radius服务端的实现
radius/radiusfast  //radius报文的快速解包实现  不进行某些rfc2865规定的校验
radius/radiusiptv   //基于radius协议的iptv协议实现



----------------------------------------------------
----------------------------------------------------
全局区：

//定义错误
err{
	
}

checkErr(error) //打印错误，开发过程中调试使用
strpredone   //预处理string,全部转换为大写
isEOF //判断是否为结束符

----------------------------------------------------
厂商列表：
type VendorId uint32

list_vendor_id
func (v vendorId) name() string
func (v vendorId) typestring()
func str2vendorId(s string) vendorId
----------------------------------------------------
属性列表：

定义radius的attribute
type attributeId uint8
type attributeLen uint8
type attributeValue []byte
type vendorAttId uint8
type vendorAttLen uint8
定义属性值类型
type INTEGER uint32
type STRING string
type IPADDR []byte
type TAG_INT uint32
type TAG_STR string
type HEXADECIMAL []byte


----------------------------------------------------
属性列表：
list_attribute_id
func (a attributeId) name() string 
func (a attributeId) typestring() string
func str2attbuteId(s string) attributeId

list_vendor_att_id
list_vendor_att4_id
func str2vendorAttId(v vendorId, s string) vendorAttId

type r_Attribute interface {
	wite2Buf(*bytes.Buffer) error
	getValueType() string
	String() string
}

自定义属性列表：
func Customer_SetVendorList(vendorid int, name string, typ string) err
func Customer_SetVendorAttList(vendorname string, vendorattid int, vendorattname string, vendoratttype string) err 

定义对外的表示厂商vondor的结构、表示属性attribute的结构
func PrintVender(interface{}) ({int, string, string},error)
func PrintVenders() ([]{int, string, string})
func PrintAtttibute(vendor interface{}, attid int) ({int,int,string, string},error)
func PrintAtttibutes(vendor interface{}) ([]{int,int,string, string},error)

属性含义列表：
list_attribute_meaning
AttributeMeanig(s string, i int) string



----------------------------------------------------
----------------------------------------------------
//基础radius数据结构
Radius
	Recevtime time.Time
	R_Code
	R_Id
	R_Length
	R_Authenticator
	R_Attributelist map[{vendorId,attributeId}]
	atts []r_Attribute

方法：
NewRadius()*Radius
NewRadiusBy(buf bytes.Buffer)(*Radius,error)

r.String()string
r.Fill(bytes.Buffer)error

r.NewReplayRadius(bool)(*Radius,error)
r.AddAttr(vondor int,attId int,value interface{})error
r.GetAttr(vonderId int,attId int)(value interface{},err error)
r.Finish()error      		//计算 R_Length R_Id R_Authenticator
r.Bytes()([]bytes,error)
r.WriteToBuff(*bytes.Buffer)err
r.Send(conn *net.UDPConn,secret string)error

----------------------------------------------------
//从数据源获取的radius源报文结构
RadiusReceived
	Source net.UDPAddr
	Secret string
	recevtime time.Time
	Radius

方法：
r.String()string
GetNewRadius(conn *net.UDPConn) (*RadiusReceived,error) //返回可send发送的radius响应数据结构
r.ReplyRadius()(*RadiusForSend,error)

----------------------------------------------------
//可直接使用send方法发送的radius数据结构
RadiusForSend
	Dest net.UDPAddr
	Secret string
	recevtime time.Time
	Radius
	buff 

方法：
r.String()string
r.IsTimeout()bool
r.Send()error

----------------------------------------------------
R_Code uint8
方法：
R_Code.String()string
R_Code.get(buf *bytes.Buffer)err
----------------------------------------------------
R_Id uint8
方法：
R_Id.String()string
R_Id.get(buf *bytes.Buffer)err
----------------------------------------------------
R_Length uint16
方法：
R_Length.String()string
R_Length.get(buf *bytes.Buffer)err
----------------------------------------------------
R_Authenticator []byte
方法：
R_Authenticator.String()string
R_Authenticator.get(buf *bytes.Buffer)err
----------------------------------------------------

VendorId  + AttId +  AttVId     AttributeValue 


AttributeId   +                                  AttributeValues


Attribute{
	
}






